# -*- coding: utf-8 -*-
"""Tugas1_1301201590.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jqTL9DzsUGUr3PuM05ReHUh-VQDOzrkp
"""

import pandas as pd

df = pd.read_excel("/content/1615_phone_gyro.xlsx")
df.head()

import numpy as np
from scipy.signal import butter, lfilter, freqz
from matplotlib import pyplot as plt


def butter_lowpass(cutoff, fs, order=5):
    nyq = 0.5 * fs
    normal_cutoff = cutoff / nyq
    b, a = butter(order, normal_cutoff, btype='low', analog=False)
    return b, a


def butter_lowpass_filter(data, cutoff, fs, order=5):
    b, a = butter_lowpass(cutoff, fs, order=order)
    y = lfilter(b, a, data)
    return y


# Filter requirements.
order = 6
fs = 30.0       # sample rate, Hz
cutoff = 3.667  # desired cutoff frequency of the filter, Hz

# Get the filter coefficients so we can check its frequency response.
b, a = butter_lowpass(cutoff, fs, order)

# Plot the frequency response.
w, h = freqz(b, a, worN=8000)
plt.subplot(2, 1, 1)
plt.plot(0.5*fs*w/np.pi, np.abs(h), 'b')
plt.plot(cutoff, 0.5*np.sqrt(2), 'ko')
plt.axvline(cutoff, color='k')
plt.xlim(0, 0.5*fs)
plt.title("Lowpass Filter Frequency Response")
plt.xlabel('Frequency [Hz]')
plt.grid()


# Demonstrate the use of the filter.
# First make some data to be filtered.
T = 5.0             # seconds
n = int(T * fs)     # total number of samples
t = np.linspace(0, T, n, endpoint=False)
# "Noisy" data.  We want to recover the 1.2 Hz signal from this.
data = np.sin(1.2*2*np.pi*t) + 1.5*np.cos(9*2*np.pi*t) \
        + 0.5*np.sin(12.0*2*np.pi*t)

# Filter the data, and plot both the original and filtered signals.
y = butter_lowpass_filter(data, cutoff, fs, order)

plt.subplot(2, 1, 2)
plt.plot(t, data, 'b-', label='data')
plt.plot(t, y, 'g-', linewidth=2, label='filtered data')
plt.xlabel('Time [sec]')
plt.grid()
plt.legend()

plt.subplots_adjust(hspace=0.35)
plt.show()

import numpy as np
import matplotlib.pyplot as plt

def moving_average(data, smooth_interval=2):

    if(smooth_interval > len(data)):
        print("Smooth interval > lenght of data")
        return
    
    sum = 0
    new_data = np.zeros(len(data))

    for i in range (smooth_interval):
        for j in range(smooth_interval):
            sum += data[i+j]
        average = sum/smooth_interval
        new_data[i] = average
        sum = 0

    for i in range(len(data)-smooth_interval):
        for j in range(smooth_interval):
            sum += data[i+j]
        average = sum/smooth_interval
        new_data[i+smooth_interval] = average
        sum = 0
    return new_data

def exponential_moving_avereage(data, smooth_interval = 2):

    if smooth_interval >= len(data):
        print("Smooth interval more or equal array lenght!")
        return
    
    alpha = 2.0/(smooth_interval+1)
    filtered_values = np.zeros(len(data))
    sum = 0

    for step in range(smooth_interval):
        sum += data[step]
    previous_ma_value = sum/smooth_interval

    for step in range(smooth_interval-1):
        previous_ma_value = alpha*data[step]+(1-alpha)*previous_ma_value
        filtered_values[step] = previous_ma_value

    sum = 0

    for step in range(smooth_interval):
        sum += data[step]
    previous_ma_value = sum/smooth_interval
    filtered_values[smooth_interval-1] = previous_ma_value

    for step in range(smooth_interval, len(data)):
        previous_ma_value = alpha*data[step]+(1-alpha)*previous_ma_value
        filtered_values[step] = previous_ma_value

    return filtered_values

def weighted_moving_average(data, smooth_interval=2):

    if(smooth_interval > len(data)):
        print("Smooth interval > lenght of data")
        return

    sum = 0
    j_sum = 0
    new_data = np.zeros(len(data))

    for i in range(smooth_interval):
        for j in range(smooth_interval):
            sum += data[i+j]*(j+1)
            j_sum += (j+1)
        average = (sum)/(j_sum)
        new_data[i] = average
        sum = 0
        j_sum = 0

    for i in range(len(data)-smooth_interval):
        for j in range(smooth_interval):
            sum += data[i+j]*(j+1)
            j_sum += (j+1)
        average = (sum)/(j_sum)
        new_data[i+smooth_interval] = average
        sum = 0
        j_sum = 0

    return new_data

t = np.arange(0.0,2.0, 1e-2)
y = np.sin(t) + np.random.rand(t.shape[0])
n = 25

new_data_exp = exponential_moving_avereage(y, n)
new_data_weight = weighted_moving_average(y, n)
new_data = moving_average(y,n)

plt.plot(y, label = 'Origial')
plt.plot(new_data_exp, label = 'Exp Filtered data')
plt.plot(new_data_weight, label = 'Weight Filtered data')
plt.plot(new_data, label = 'Filtered data')
plt.legend()
plt.show()